% \iffalse meta-comment
%
% Copyright (C) 2014 by Julien Cretel
%                       <jubobs.matlab.prettifier at gmail.com>
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%
%     http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% \fi
%
% \iffalse
%<package>\NeedsTeXFormat{LaTeX2e}[2011/06/27]
%<package>\ProvidesPackage{sc-prettifier}
%<package>  [2014/04/28 v0.2a A package for prettyprinting SuperCollider
%<package>   source code]
%
%<*driver>
\documentclass[a4paper]{ltxdoc}
\EnableCrossrefs
\CodelineIndex
\RecordChanges

\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage{xcolor}
\usepackage{lstdoc}
\usepackage[framed,numbered]{sc-prettifier}
\usepackage{hyperref}

\lstdefinestyle{nonbnoframe}
{
  frame   = none,
  numbers = none,
}

\newcommand\ph\snippetPlaceholder
\newcommand*{\pkg}[1]{\textsf{#1}}
\newcommand*{\opt}[1]{\texttt{#1}}
\newcommand\SC{\textsc{SuperCollider}}
\newcommand\scpkg{\textsf{sc-prettifier}}
\newcommand\lstpkg{\textsf{listings}}
\newcommand\sclng{\texttt{SuperCollider-pretty}}
\newcommand*{\scsty}[1]{\texttt{#1}}
\makeindex

\begin{document}
  \DocInput{sc-prettifier.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{133}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \changes{v0.1}{2014/04/24}{Initial release.}
%
% \GetFileInfo{sc-prettifier.sty}
%
%  ^^A see http://www.latex-project.org/cgi-bin/ltxbugs2html?pr=latex%2F3540
%  \begingroup
%    \def\x{\#,\$,\%,\^,\_,\~,\&,\{,\},\/}%^^A
%    \makeatletter
%    \@onelevel@sanitize\x
%  \expandafter\endgroup\expandafter\DoNotIndex\expandafter{\x}
%
% \begingroup
%    \makeatletter
%    \lccode`9=32\relax
%    \lowercase{%^^A
%      \edef\x{\noexpand\DoNotIndex{\@backslashchar9}}%^^A
%    }%^^A
%  \expandafter\endgroup\x
%
% \DoNotIndex{}
%
% \title^^A
% {^^A
%   The \scpkg{} package^^A
%   \thanks^^A
%   {^^A
%     This document corresponds to \scpkg~\fileversion,
%     dated~\filedate.^^A
%   }^^A
%  }
% \author{Julien Cretel\\ \texttt{jubobs.tex at gmail.com}}
% \date{\filedate}
% \thispagestyle{empty}
% \maketitle
%
% \begin{abstract}
%   Built on top of the \lstpkg{} package, the \scpkg{} package allows you to
%   effortlessly prettyprint \\SC{} source code in documents typeset with
%   \LaTeX{} \& friends. 
% \end{abstract}
%
% \tableofcontents\newpage
%
%
% \part{Introduction}
%
% \section{Why this package?}
%
% \section{Syntactic elements automatically highlighted by \scpkg{}}
% 
% \paragraph{Classes}
%
% \mbox{}
% \iffalse
%<*example>
% \fi
\begin{lstlisting}[style=nonbnoframe]
  asdfasdf
\end{lstlisting}
% \iffalse
%</example>
% \fi
%
% \section{Styles provided by \scpkg{}}
%
% \section{Other features}
%
% Additional features include
%
% \begin{itemize}
%   \item a macro for easily typesetting placeholders
%     (e.g.\ \ph{initial-value}),
%   \item automatic scaling of inline code according to its surroundings,
% \end{itemize}
% 
%
% \part{User's guide}
%
% \section{Installation}
%
% \subsection{Package dependencies}
%
% \subsection{Installing \scpkg{}}
%
% To install \scpkg{} manually, run
%^^A
% \begin{verbatim}
%   latex sc-prettifier.ins\end{verbatim}
%^^A
% and copy \scpkg{}.sty to a path where \LaTeX{} can find it.
% To generate the documentation, run
%^^A
% \begin{verbatim}
%   pdflatex sc-prettifier.dtx
%   makeindex -s gglo.ist -o sc-prettifier.gls sc-prettifier.glo
%   makeindex -s gind.ist -o sc-prettifier.ind sc-prettifier.idx
%   pdflatex sc-prettifier.dtx
%   pdflatex sc-prettifier.dtx\end{verbatim}
%^^A
%
%
% \section{Getting started}
%
% As stated above, the \scpkg{} package is built on top of the \lstpkg{}
% package.
% If you already are a seasoned \lstpkg{} user, you should feel right at home.
% If you're not, be aware that this user's guide makes use of some \lstpkg{}
% functionalities (such as key-value options) without describing their usage.
% For more details on those functionalities, you should consult the
% \href{http://www.ctan.org/pkg/listings}{\lstpkg{} documentation}.
%
%
% \subsection{Loading \texorpdfstring{\scpkg{}}{sc-prettifier}}
%
% Simply write
%^^A
% \begin{verbatim}
%   \usepackage{sc-prettifier}\end{verbatim}
%^^A
% somewhere in your preamble. You may want to load the \lstpkg{} and
% \pkg{xcolor} packages with some options; in that case, make sure those
% options are passed to those two packages \emph{before} loading the \scpkg{}
% package.
%
% \subsection{Displayed listings}
%
% To typeset a \SC{} listing embedded in your |tex| file, simply enclose
% it in an |lstlisting| environment, and load some style in the environment's
% optional argument, using \lstpkg{}' \keyname{style} key.
%^^A
% \begin{verbatim}
%   \begin{lstlisting}[style=TODO]
%     ...
%   \end{lstlisting}\end{verbatim}
%
%
% \subsection{Standalone listings}
%
% In practice, though, keeping your \SC{} listings in external files^^A
% ---rather than embedding them in a |tex|~file---^^A
% is preferable, for maintainability reasons.
% To typeset a \SC{} listing residing in an m-file, simply invoke the
% |\lstinputlisting| macro; load some style in the environment's
% optional argument, and specify the path to the m-file in question in the
% mandatory argument.
%^^A
% \begin{verbatim}
%   \lstinputlisting[style=TODO]{sample.m}\end{verbatim}
%^^A
%
%
% \subsection{Inline listings}
%
% You may want to typeset fragments of \SC{} code within the main text of
% your document. For instance, you may want to typeset the "break" keyword in
% a sentence, in order to explain it usage.
% The |\lstinline| macro can be used for typesetting such inline code.
%^^A
% \begin{verbatim}
%   \lstinline[style=TODO]!break!\end{verbatim}
%^^A
% Well, that's quite a mouthful for such a simple \SC{} keyword!
% Writing |\lstinline| for each instance of inline Matlab code in your
% document can rapidly become tedious.
% Fortunately, \lstpkg{} allows its users to define a character as a shorthand
% for inline code via the |\lstMakeShortInline| macro.
% For instance, you could define the double-quote character~(|"|) as a
% shorthand for inline \SC{} code with
%^^A
% \begin{verbatim}
%   \lstMakeShortInline[style=TODO]"\end{verbatim}
%^^A
% and you would then be able to typeset this "break" keyword simply by writing
%^^A
% \begin{verbatim}
%   "break"\end{verbatim}
%^^A
% in your |tex| file (but outside displayed listings, of course).
% 
% You should choose a character that does not otherwise occur in your
% |tex| file, especially in the inline \SC{} code itself,
% or you run the risk of confusing \TeX{}.
% I find that, in general, the double-quote character~(|"|) offers a good
% compromise.
% If necessary, you can undefine a character as a shorthand for inline code,
% via \lstpkg{}' |\lstDeleteShortInline| macro.
% For more details, see subsection~4.17 in the \lstpkg{} manual.
%
%
% \subsection{Placeholders}
%
% Code-snippet placeholders, such as \ph{initial-value}, are particularly
% useful for educational purposes, e.g.\ to describe the syntax of a
% programming language to students.
% The following macro allows you to typeset such placeholders, both
% inside and outside listings:
%^^A
% \begin{syntax}
%
%   \item[0.1] \rcmdname\snippetPlaceholder|{|\meta{placeholder content}|}|
%
%     typesets a code-snippet placeholder.
%     You can use this macro both inside and outside listings.
%     When used inside listings, it must be invoked within an
%     \emph{escape to \LaTeX{}}; see subsection~4.14 of the \lstpkg{} manual.
%
% \end{syntax}
%
% If you choose to define a single character for escaping to \LaTeX{} (via
% \lstpkg{}' \keyname{escapechar} key), I recommend you define
% either the double-quote character~(|"|)
% or the backtick character~(\texttt{\`{}})
% as escape character,
% because neither is allowed in \SC{} statements and expressions^^A
% ---although they may occur in \SC{} string literals.
% Note that using~|"| both as shorthand for inline code and as an
% escape-to-\LaTeX{} character inside listings is perfectly allowed.
% 
% The following example illustrates how placeholders may be used to describe
% the syntax of the \SC{} while loop.
%^^A
% \begin{lstsample}{}{\lstset{style=nonbnoframe}}
%    \begin{lstlisting}[
%      style   = ,
%      escapechar = `,
%    ]
%    while `\snippetPlaceholder{condition}`
%      if `\snippetPlaceholder{something-bad-happens}`
%        break
%      else
%        % do something useful
%      end
%    end
%    \end{lstlisting}
% \end{lstsample}
%
% I deliberately chose a rather long-winded name for this user-level macro
% in order to minimize the risk of conflict with other macros.
% Of course, for convenience, you can define a custom macro with a
% shorter name for typesetting placeholders, e.g.~|\ph|:
%^^A
% \begin{verbatim}
%   \newcommand\ph\snippetPlaceholder\end{verbatim}
%
%
% \section{Advanced customization}
%
% The \lstpkg{} package provides a large number of options accessible via a
% nifty key-value interface, which is described in the excellent
% \href{http://www.ctan.org/pkg/listings}{\lstpkg{} documentation}.
% The \scpkg{} package extends \lstpkg{}' key-value interface interface by
% defining several additional keys that allow you to customize the style of
% your \SC{} listings, should you wish to do so.
% All the keys provided by \scpkg{} are prefixed by ``|sc|'',
% to help you distinguish them from native \lstpkg{} keys.
% 
%
% \subsection{Keys from the \lstpkg{} that you should not use}
%
% The great majority of keys provided by \lstpkg{} can be used in conjunction
% with keys provided by \scpkg{} without any detrimental side effects,
% but there are a few exceptions that you should keep in mind.
% 
% Some \scpkg{} keys rely on \lstpkg{} keys ``under the hood'',
% and using those \scpkg{} and \lstpkg{} keys in conjunction is
% \emph{strongly discouraged},
% because doing so has the potential to wreak havok on the syntax highlighting
% of \SC{} listings.
% It would be like \emph{crossing the streams}: it would be \emph{bad}!
%
% For instance, if you want to change the way \SC{} keywords are typeset,
% you should use the dedicated \scpkg{} key called \rkeyname{sckeywordstyle}
% and eschew the \lstpkg{} key called \keyname{keywordstyle}.
% More generally, if \lstpkg{} provides a key called \meta{something} and
% \scpkg{} provides a key called |ml|\meta{something},
% customization of your \SC{} listings should be done with the latter, not
% the former.
%
%
% \subsection{Changing the font}
%
% The \SC{} editor displays some elements of \SC{} syntax
% (i.e.\ section titles) in boldface. Unfortunately, though, the font family
% used by default by \TeX{} does not come with a boldface typewriter font;
% none of the \TeX{} font families do, actually.
% Therefore, I chose the Bera Mono^^A
% ---which does provide a boldface typewriter font---^^A
% as the default font family for \scpkg{}'s styles.
% Bera Mono is very similar to the proprietary typeface (called Monospaced)
% that the \SC{} editor uses by default.
%
% Note that you need to load the \pkg{fontenc}~package with option~\opt{T1}
% for Bera Mono to actually be used:
%^^A
% \begin{verbatim}
%   \usepackage[T1]{fontenc}\end{verbatim}%
%^^A
% The \scpkg{} package does not automatically do this, because I do not want
% to force the use of that package and option upon you.
%
% If you're not happy with \scpkg{}'s default font, you're welcome to select a
% different font for your listings, using \lstpkg{}' \rkeyname{basicstyle}
% key; see subsection~4.6 of the
% \href{http://www.ctan.org/pkg/listings}{\lstpkg{} documentation}
% for more details.
% In case you change the font and later want to revert to \scpkg{}'s default
% font, you can select the latter using the \rcmdname\mlttfamily{} macro.
%^^A
% \begin{syntax}
%
%   \item[0.1] \rcmdname\scttfamily
%
%     selects the Bera Mono font (somewhat scaled down).
%
% \end{syntax}
%
% \subsection{\scpkg{}'s key-value interface}
%
% For each of the \scpkg{} keys described below,
% the value assigned to it in the \scsty{TODO} style is indicated
% on the right-hand side.
%^^A
% \begin{syntax}
%
%   \item[0.1,\color{blue}]
%     \rkeyname{sckeywordstyle}|=|\meta{style}
%
%     This key determines the style applied to \SC{} keywords.
%     The last token can be a one-parameter command,
%     such as |\textbf| or |\underbar|.
%
%   \item[0.1,{\color[RGB]{160,32,240}}]
%     \rkeyname{scstringstyle}|=|\meta{style}
%
%     This key determines the style applied to \SC{} quoted and unquoted
%     strings.
%     The last token can be a one-parameter command,
%     such as |\textbf| or |\underbar|.
%
%   \item[0.1,{\color[RGB]{34,139,34}}]
%     \rkeyname{sccommentstyle}|=|\meta{style}
%
%     This key determines the style applied to \SC{} to-end-of-line and
%     block comments.
%     The last token can be a one-parameter command,
%     such as |\textbf| or |\underbar|.
%
%   \item[0.1,{\bfseries\color[RGB]{34,139,34}}]
%     \rkeyname{scsectiontitlestyle}|=|\meta{style}
 
%     This key determines the style applied to \SC{} section titles.
%     The last token can be a one-parameter command,
%     such as |\textbf| or |\underbar|.
 
%   \item[0.1,{\rmfamily\itshape\color[RGB]{209,0,86}}]
%     \rkeyname{scplaceholderstyle}|=|\meta{style}
%
%     This key determines the style applied to placeholders in code snippets.
%     The last token can be a one-parameter command,
%     such as |\textbf| or |\underbar|.
%
%   \item[0.2,true]
%     \rkeyname{scscaleinline}|=|\meta{\alternative{true,false}}
%     \syntaxor\rkeyname{scscaleinline}
%
%     If this key is set, any font-size specification in the basic style is
%     overriden, and inline \SC{} code is scaled to it surroundings;
%     in other words, the font size of inline \SC{} code is made to match
%     the local font size.
% 
% \end{syntax}
%
%
% \section{Tips and tricks}
%
% Here is a list of recommendations^^A
% ---some more opinionated than others.
% \paragraph{Stick with the \sclng{} language.}
% Defining a \lstpkg{} language based on \sclng{} is discouraged,
% for the following reason:
% \scpkg{} performs some necessary housekeeping tasks at the beginning and
% end of each listing, but only under the condition that the name of the
% language used by the listing be \sclng{};
% therefore, \SC{} listings are unlikely to get correctly highlighted if
% the language name differs from \sclng{}.
%
% \paragraph{Define your own style.}
% For maintainability reasons, if you're not completely satisfied with any of
% the predefined styles, you should define your own \lstpkg{} style.
% You can even base your custom style on one of the predefined styles and
% tweak it (see subsection~4.5 in the
% \href{http://www.ctan.org/pkg/listings}{\lstpkg{} documentation}).
%
% \paragraph{Load the base language/style first; customize later.}
% If you want to customize the appearance of your \SC{} listings, 
% you should use \lstpkg{}' \keyname{language} key or \keyname{style} key
% before using any other (\lstpkg{} or \scpkg{}) key,
% because loading a language or a style ``too late'' has the potential to
% wipe out most of the current settings.
%
% \paragraph{Define macros for recurring placeholders.}
% For maintainability reasons, you should define macros for oft-used
% placeholders, e.g.
%^^A
% \begin{verbatim}
%   \newcommand\phcond{\snippetPlaceholder{condition}}\end{verbatim}
%
% \paragraph{For more highlights, use \lstpkg{}' \keyname{emph} key}
% If you want to highlight some identifiers in \SC{} listings, use
% \lstpkg{}' \keyname{emph} key. Do \emph{not} use \lstpkg{}'
% \keyname{keywords} or \keyname{morekeywords} keys.
%
% \paragraph{Don't copy \& paste!}
% Do not encourage your readers to copy listings from their PDF viewer and
% then paste them in the \SC{} editor.
% Unfortunately, it simply is \emph{not} a reliable way of distributing code,
% for at least three reasons:
%^^A
% \begin{itemize}
%   \item copying listings than span multiple pages of a PDF document is
%     tedious and error-prone;
%   \item the results of copying content from a PDF for
%     subsequent pasting vary widely from one PDF viewer to another;
%   \item line breaks introduced by \lstpkg{} for typesetting a \SC{}
%     listing may translate to invalid \SC{} syntax, if copied and pasted
%     \emph{verbatim}.
% \end{itemize}
%
% \paragraph{Typesetting a vertically centered tilde}
% Unfortunately, not all fonts typeset the tilde character ("~") vertically
% centered---as it is in the \SC{} editor.
% Be aware that, if you set a font for your \SC{} listings
% (via \lstpkg{}' \keyname{basicstyle} key) that is different from \scpkg{}'s
% default (a scaled-down version of Bera Mono), tilde characters occuring in
% your listings may get typeset vertically off-center.
% Because a good, font-independent workaround seems out of reach,
% I refer you to \url{http://tex.stackexchange.com/q/312/21891},
% where you will find a list of ad-hoc solutions.
%
% \paragraph{Avoid literate replacements like the plague!}
% The \pkg{mcode} package predefines so-called ``literate replacements''
% (see subsection~5.4 in the
% \href{http://www.ctan.org/pkg/listings}{\lstpkg{} documentation}),
% e.g.\ for printing~``\(\leq\)'' in place of each instance of~``"<="''.
% I deliberately chose not to define any such literate replacements in
% \scpkg{} because I think that, rather than improving code readability,
% they have a potential to confuse and mislead your readers.
% In particular, newcomers to the programming language may not immediately
% realize that those symbols are not part of the language's syntax;
% they may ascribe literal meaning to them and attempt to reproduce them in
% their editor or IDE.
% How counterproductive!
% Of course, if you insist, you can still define your own literate
% replacements.
%
%
% \part{Miscellaneous}
% 
% \section{Missing features and known issues}
%
% \section{Bug reports and feature suggestions}
%
% The development version of \scpkg{} is currently hosted on Bitbucket at
% \href{http://bitbucket.org/Jubobs/sc-prettifier/}
%   {Jubobs/sc-prettifier}.
% If you find an issue in \scpkg{} that this manual does not mention,
% if you would like to see a feature implemented in the package,
% or if you can think of ways in which the \scpkg{} documentation could be
% improved, please add an entry to the Bitbucket repository's issue tracker;
% alternatively, you can send me an email at
% \href{mailto:jubobs.tex@gmail.com}
%   {jubobs.tex@gmail.com}
%
% \makeatletter
% \def\index@prologue{\part{Index}\markboth{Index}{Index}}
% \makeatother
% \StopEventually{^^A
%   \clearpage^^A
%   \PrintChanges^^A
%   \setcounter{IndexColumns}{2}^^A
%   \PrintIndex^^A
% }
%
% \section{Acknowledgments}
% Thanks to the developers of the \lstpkg{} package,
% without which \scpkg{} would never have existed.
% I'm also in debt to many
% \href{http://tex.stackexchange.com}{TeX.SX} users for their help,
% encouragements, and suggestions.
% Thanks in particular to James Harkins, David Carlisle, Marco Daniel,
% Enrico Gregorio (egreg), Harish Kumar, and Heiko Oberdiek.
% Thanks also to the good people at \href{http://www.ctan.org}{CTAN}
% for hosting the package.
%
%
% \part{Implementation}
%
% Be aware that, for ``namespacing'', the \scpkg{} package uses, not a prefix,
% but the ``|scpr|''~suffix (preceded by an |@| character) throughout.
%
%
% \section{Preliminary checks}
%
% \begin{macro}{\lstoptcheck@scpr}
%   Because the \lstpkg{} options \opt{noaspects}, \opt{0.21}, and
%   \opt{savemem} are incompatible with \pkg{sc-prettifier}, checking
%   whether the \lstpkg{} package has been loaded with any of those options is
%   a good idea; if so, we should issue an error.
%   This macro checks whether \lstpkg{} was loaded with a given option
%   and, if so, throws an error.
%    \begin{macrocode}
\newcommand\lstoptcheck@scpr[1]
{%
  \@ifpackagewith{listings}{#1}%
  {
    \PackageError{sc-prettifier}%
      {incompatible listings' option #1}%
      {%
        Make sure the `listings' package
        doesn't get loaded with option `#1'%
      }
  }
  {}
}
%    \end{macrocode}
% \end{macro}
% We now use this macro to make sure that none of the problematic \lstpkg{}
% options has been passed to \lstpkg{} during an earlier loading of that
% package.
%    \begin{macrocode}
\lstoptcheck@scpr{noaspects}
\lstoptcheck@scpr{0.21}
\lstoptcheck@scpr{savemem}
%    \end{macrocode}
%
%
% \section{Package options}
%
% \paragraph{Framed listings}
% \begin{macro}{\ifframed@scpr@}
% This option draws a frame around each listing by default.
%    \begin{macrocode}
\newif\ifframed@scpr@
\DeclareOption{framed}{\framed@scpr@true}
%    \end{macrocode}
% \end{macro}
%
% \paragraph{Numbered lines}
% \begin{macro}{\ifnumbered@scpr@}
% This option prints line numbers to the left of each listing by default.
%    \begin{macrocode}
\newif\ifnumbered@scpr@
\DeclareOption{numbered}{\numbered@scpr@true}
%    \end{macrocode}
% \end{macro}
%
% \paragraph{Draft}
% This option is simply passed to \lstpkg{}.
%    \begin{macrocode}
\DeclareOption{draft}{\PassOptionsToPackage{\CurrentOption}{listings}}
%    \end{macrocode}
%
% \paragraph{Final}
% This option is simply passed to \lstpkg{}.
%    \begin{macrocode}
\DeclareOption{final}{\PassOptionsToPackage{\CurrentOption}{listings}}
%    \end{macrocode}
%
% \paragraph{Discard undefined options}
% We discard any other option passed to \scpkg{} by the user
% and issue a warning.
%    \begin{macrocode}
\DeclareOption*%
{%
  \OptionNotUsed
  \PackageWarning{sc-prettifier}{Unknown `\CurrentOption' option}
}
%    \end{macrocode}
% \paragraph{Process options}
%    \begin{macrocode}
\ProcessOptions\relax
%    \end{macrocode}
%
%
% \section{Required packages}
% 
% The \scpkg{} package require three packages without any package option:
% the \pkg{textcomp} package, in order to use \lstpkg{}' \keyname{upquote}
% key;
% the \pkg{xcolor} package, in order to color our \SC{} code;
% and, of course, the \lstpkg{} package.
%    \begin{macrocode}
\RequirePackage{textcomp}[2005/09/27]
\RequirePackage{xcolor}[2007/01/21]
\RequirePackage{listings}[2013/08/26]
%    \end{macrocode}
%
%
% \section{Definition of the \texorpdfstring{\sclng}{TODO} language}
%
% \paragraph{Language name}
% \begin{macro}{\language@scpr}
%   To avoid code duplication in this package file, we define a macro that
% expands to the name of our new language, \sclng{}.
%    \begin{macrocode}
\newcommand\language@scpr{Matlab-pretty}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\languageNormedDefd@scpr}
%   However, because \lstpkg{} ``normalizes'' language names internally,
%   we will also need to define a macro that expands to the normalized name of
%   the new language.
%    \begin{macrocode}
\expandafter\lst@NormedDef\expandafter\languageNormedDefd@scpr%
  \expandafter{\language@scpr}
%    \end{macrocode}
% \end{macro}
%
% \paragraph{Language definition}
% We can now define our new \lstpkg{} language, using some |\expandafter|
% trickery on |\lstdefinelanguage|.
%    \begin{macrocode}
\expandafter\expandafter\expandafter\lstdefinelanguage\expandafter%
{\language@scpr}
{%
%    \end{macrocode}
%
% \paragraph{Case sensitivity}
% \SC{} is a case-sensitive language.
%    \begin{macrocode}
  sensitive=true,
%    \end{macrocode}
%
% \paragraph{Forbidden characters in identifiers}
% By default, \lstpkg{} allows ``\$'' and ``@'' to occur in identifiers,
% but those characters are not valid \SC{} identifiers.
%    \begin{macrocode}
  alsoother={\$@},
%    \end{macrocode}
%
% \paragraph{Character-table adjustments}
% In order to keep track of the context, we need to modify the character
% table a bit.
%    \begin{macrocode}
  MoreSelectCharTable=\MoreSelectCharTable@scpr,
%    \end{macrocode}
%
% \paragraph{Keywords}
%
%    \begin{macrocode}
  morekeywords={}
%    \end{macrocode}
%
% \paragraph{Strings}
%    \begin{macrocode}
  morestring=,
%    \end{macrocode}
%
% \paragraph{Comments \& section titles}
%    \begin{macrocode}
%    \end{macrocode}
%
% \paragraph{Required \lstpkg{} aspects} 
% We now only need to specify the required \lstpkg{} ``aspects''.
%    \begin{macrocode}
}[
  keywords,
  strings,
  comments,
]
%    \end{macrocode}
%
%
% \section{Hooking into \lstpkg{}' hooks}
%
% We apply some necessary patches in a a number of \lstpkg{}' hooks;
% but first, we define a few helper macros.
%
% \paragraph{\hookname{SomeHook}}
% (See the
% \href{http://www.ctan.org/pkg/listings}{\lstpkg{} documentation} 
% for more details on this hook.)
% \begin{macro}{\addedToSomeHook@scpr}
% We add this macro (initially empty) to \lstpkg{}'
% \hookname{SomeHook} hook.
%    \begin{macrocode}
\newcommand\addedToSomeHook@scpr{}
\lst@AddToHook{SomeHook}{\addedToSomeHook@scpr}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@ddedToSomeHook@scpr}
% The |\addedToSomeHook@scpr| macro is let to this one under certain
% conditions (more details follow).
% ...
%    \begin{macrocode}
\newcommand\@ddedToSomeHook@scpr{}
%    \end{macrocode}
% \end{macro}
%
% \paragraph{\hookname{PreInit}}
% (See the
% \href{http://www.ctan.org/pkg/listings}{\lstpkg{} documentation} 
% for more details on this hook.)
% Because the |\lst@AddToHook| affects hooks globally
% (i.e.\ for all listings),
% we must apply our patches only when required, i.e.\ 
% in listings that use \sclng{}, and not in others.
% The \hookname{PreInit}, which is called at the very beginning of each
% listing, is where we do that.
% \begin{macro}{\addedToPreInitHook@scpr}
% In this macro, which we add to \lstpkg{}' \hookname{PreInit} hook, we check
% whether |\lst@language| and |\languageNormedDefd@scpr| expand (once) to the
% same replacement text and only apply our patches under that condition.
%    \begin{macrocode}
\newcommand\addedToPreInitHook@scpr
{%
  \ifx\lst@language\languageNormedDefd@scpr%
    \scaleInlineCode@scpr%
    \renewcommand\addedToSomeHook@scpr\@ddedToSomeHook@mlpr%
\fi
}
%    \end{macrocode}
% \end{macro}
%
% \paragraph{\hookname{DeInit}}
% (See the
% \href{http://www.ctan.org/pkg/listings}{\lstpkg{} documentation} 
% for more details on this hook.)
% In the \hookname{DeInit} hook, which is called at the very end of each
% listing, we carry out some housekeeping tasks if the current listing uses
% \sclng{}.
% \begin{macro}{\addedToDeInitHook@scpr}
% In this macro, which we add to \lstpkg{}' \hookname{DeInit} hook, we check
% whether |\lst@language| and |\languageNormedDefd@scpr| expand (once) to the
% same replacement text and, under that condition, we reset all state
% variables.
%    \begin{macrocode}
\newcommand\addedToDeInitHook@scpr
{%
  \ifx\lst@language\languageNormedDefd@scpr%
  \fi
}
\lst@AddToHook{DeInit}{\addedToDeInitHook@scpr}
%    \end{macrocode}
% \end{macro}
%
%
% \section{Key-value interface}
%
% We extend \lstpkg{}' key-value interface by defining several additional
% keys, which we will use to define three \lstpkg{} styles, and which will
% allow the user to customize the style of their \SC{} listings,
% should they which to do so.
% All \scpkg{} keys are prefixed by~``|sc|'', so that the user can easily
% distinguish them from ``native'' \lstpkg{} keys.
%
% \begin{macro}{\mlttfamily}
% This user-level macro can be used for selecting a scaled version of the
% Bera Mono font, a typewriter font family which, contrary to typewriter
% \TeX{} fonts, conveniently comes with a boldface version.
%    \begin{macrocode}
\newcommand\mlttfamily
{%
  \def\fvm@Scale{.85}%
  \fontfamily{fvm}\selectfont%
}
%    \end{macrocode}
% \end{macro}
%
% \paragraph{Code-snippet placeholders}
% \begin{macro}{\snippetPlaceholder}
% This user-level macro can be used to typeset placeholders in code snippets.
%    \begin{macrocode}
\newcommand\snippetPlaceholder[1]
{%
  \bgroup%
    \bgroup%
    \egroup%
    #1\itcorr@scpr%
    \bgroup%
    \egroup%
  \egroup%
}
%    \end{macrocode}
% \end{macro}
%
% 
% \section{Other helper macros}
% \begin{macro}{\itcorr@scpr}
% This macro is used for applying italic correction in case the current font
% shape is either italic or slanted.
%    \begin{macrocode}
\newcommand\itcorr@scpr
{%
%    \end{macrocode}
% We define a (long) macro that expands (once) to the current font shape,
% for comparison purposes.
%    \begin{macrocode}
  \expandafter\newcommand\expandafter\long@f@shape@scpr%
    \expandafter{\f@shape}%
%    \end{macrocode}
% If the current font shape is either italic or slanted, we apply italic
% correction.
%    \begin{macrocode}
  \ifx\long@f@shape@scpr\itdefault%
    \/%
  \else
    \ifx\long@f@shape@scpr\sldefault%
      \/%
    \fi
  \fi
}
%    \end{macrocode}
% \end{macro}
%
%
% \section{\texorpdfstring{\scpkg{}}{sc-prettifier} styles}
%
% \paragraph{Base style}
%
% This style is used internally to define the three user-level styles.
% It's not meant to be used outside this package file.
%    \begin{macrocode}
\toks@=%
{
  language               = \languageNormedDefd@scpr,
  basicstyle             = \color{black}\mlttfamily\normalsize,
  breaklines             = true,
  showspaces             = false,
  showstringspaces       = false,
  upquote                = true,
  rulecolor              = \color{black!67},
  numberstyle            = \color{black!33},
  mlscaleinline          = true,
  mlonlyheader           = false,
}
\ifframed@scpr@
  \toks@=\expandafter{\the\toks@ frame=single,}
\fi
\ifnumbered@scpr@
  \toks@=\expandafter{\the\toks@ numbers=left,}
\fi
\begingroup\edef\@tempa{\endgroup
  \noexpand\lstdefinestyle{MatlabBaseStyle@scpr}{\the\toks@}
}\@tempa
%    \end{macrocode}
%
% \paragraph{Standard style}
%
% \paragraph{Black \& white style}
% Black \& white, printer-friendly style.
%    \begin{macrocode}
\lstdefinestyle{Matlab-bw}
{
}
%    \end{macrocode}
%
% \paragraph{Style of Pygments' MatlabLexer}
%
% \Finale
\endinput
